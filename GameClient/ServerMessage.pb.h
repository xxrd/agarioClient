// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServerMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServerMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServerMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServerMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServerMessage_2eproto;
namespace ServerMessage {
class CurrentPlayer;
class CurrentPlayerDefaultTypeInternal;
extern CurrentPlayerDefaultTypeInternal _CurrentPlayer_default_instance_;
class Food;
class FoodDefaultTypeInternal;
extern FoodDefaultTypeInternal _Food_default_instance_;
class FoodList;
class FoodListDefaultTypeInternal;
extern FoodListDefaultTypeInternal _FoodList_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerList;
class PlayerListDefaultTypeInternal;
extern PlayerListDefaultTypeInternal _PlayerList_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
}  // namespace ServerMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::ServerMessage::CurrentPlayer* Arena::CreateMaybeMessage<::ServerMessage::CurrentPlayer>(Arena*);
template<> ::ServerMessage::Food* Arena::CreateMaybeMessage<::ServerMessage::Food>(Arena*);
template<> ::ServerMessage::FoodList* Arena::CreateMaybeMessage<::ServerMessage::FoodList>(Arena*);
template<> ::ServerMessage::Player* Arena::CreateMaybeMessage<::ServerMessage::Player>(Arena*);
template<> ::ServerMessage::PlayerList* Arena::CreateMaybeMessage<::ServerMessage::PlayerList>(Arena*);
template<> ::ServerMessage::ServerMessage* Arena::CreateMaybeMessage<::ServerMessage::ServerMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ServerMessage {

enum ServerMessage_MessageType : int {
  ServerMessage_MessageType_gameInfo = 1,
  ServerMessage_MessageType_disconnect = 2
};
bool ServerMessage_MessageType_IsValid(int value);
constexpr ServerMessage_MessageType ServerMessage_MessageType_MessageType_MIN = ServerMessage_MessageType_gameInfo;
constexpr ServerMessage_MessageType ServerMessage_MessageType_MessageType_MAX = ServerMessage_MessageType_disconnect;
constexpr int ServerMessage_MessageType_MessageType_ARRAYSIZE = ServerMessage_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessage_MessageType_descriptor();
template<typename T>
inline const std::string& ServerMessage_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerMessage_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerMessage_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerMessage_MessageType_descriptor(), enum_t_value);
}
inline bool ServerMessage_MessageType_Parse(
    const std::string& name, ServerMessage_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerMessage_MessageType>(
    ServerMessage_MessageType_descriptor(), name, value);
}
// ===================================================================

class ServerMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerMessage.ServerMessage) */ {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const final {
    return CreateMaybeMessage<ServerMessage>(nullptr);
  }

  ServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerMessage.ServerMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerMessage_2eproto);
    return ::descriptor_table_ServerMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerMessage_MessageType MessageType;
  static constexpr MessageType gameInfo =
    ServerMessage_MessageType_gameInfo;
  static constexpr MessageType disconnect =
    ServerMessage_MessageType_disconnect;
  static inline bool MessageType_IsValid(int value) {
    return ServerMessage_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    ServerMessage_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    ServerMessage_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    ServerMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return ServerMessage_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return ServerMessage_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return ServerMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFoodListFieldNumber = 1,
    kPlayerListFieldNumber = 2,
    kCurrentPlayerFieldNumber = 3,
    kMessageTypeFieldNumber = 4,
  };
  // optional .ServerMessage.FoodList foodList = 1;
  bool has_foodlist() const;
  private:
  bool _internal_has_foodlist() const;
  public:
  void clear_foodlist();
  const ::ServerMessage::FoodList& foodlist() const;
  ::ServerMessage::FoodList* release_foodlist();
  ::ServerMessage::FoodList* mutable_foodlist();
  void set_allocated_foodlist(::ServerMessage::FoodList* foodlist);
  private:
  const ::ServerMessage::FoodList& _internal_foodlist() const;
  ::ServerMessage::FoodList* _internal_mutable_foodlist();
  public:

  // optional .ServerMessage.PlayerList playerList = 2;
  bool has_playerlist() const;
  private:
  bool _internal_has_playerlist() const;
  public:
  void clear_playerlist();
  const ::ServerMessage::PlayerList& playerlist() const;
  ::ServerMessage::PlayerList* release_playerlist();
  ::ServerMessage::PlayerList* mutable_playerlist();
  void set_allocated_playerlist(::ServerMessage::PlayerList* playerlist);
  private:
  const ::ServerMessage::PlayerList& _internal_playerlist() const;
  ::ServerMessage::PlayerList* _internal_mutable_playerlist();
  public:

  // optional .ServerMessage.CurrentPlayer currentPlayer = 3;
  bool has_currentplayer() const;
  private:
  bool _internal_has_currentplayer() const;
  public:
  void clear_currentplayer();
  const ::ServerMessage::CurrentPlayer& currentplayer() const;
  ::ServerMessage::CurrentPlayer* release_currentplayer();
  ::ServerMessage::CurrentPlayer* mutable_currentplayer();
  void set_allocated_currentplayer(::ServerMessage::CurrentPlayer* currentplayer);
  private:
  const ::ServerMessage::CurrentPlayer& _internal_currentplayer() const;
  ::ServerMessage::CurrentPlayer* _internal_mutable_currentplayer();
  public:

  // required .ServerMessage.ServerMessage.MessageType messageType = 4;
  bool has_messagetype() const;
  private:
  bool _internal_has_messagetype() const;
  public:
  void clear_messagetype();
  ::ServerMessage::ServerMessage_MessageType messagetype() const;
  void set_messagetype(::ServerMessage::ServerMessage_MessageType value);
  private:
  ::ServerMessage::ServerMessage_MessageType _internal_messagetype() const;
  void _internal_set_messagetype(::ServerMessage::ServerMessage_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:ServerMessage.ServerMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ServerMessage::FoodList* foodlist_;
  ::ServerMessage::PlayerList* playerlist_;
  ::ServerMessage::CurrentPlayer* currentplayer_;
  int messagetype_;
  friend struct ::TableStruct_ServerMessage_2eproto;
};
// -------------------------------------------------------------------

class FoodList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerMessage.FoodList) */ {
 public:
  FoodList();
  virtual ~FoodList();

  FoodList(const FoodList& from);
  FoodList(FoodList&& from) noexcept
    : FoodList() {
    *this = ::std::move(from);
  }

  inline FoodList& operator=(const FoodList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FoodList& operator=(FoodList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FoodList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FoodList* internal_default_instance() {
    return reinterpret_cast<const FoodList*>(
               &_FoodList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FoodList& a, FoodList& b) {
    a.Swap(&b);
  }
  inline void Swap(FoodList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FoodList* New() const final {
    return CreateMaybeMessage<FoodList>(nullptr);
  }

  FoodList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FoodList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FoodList& from);
  void MergeFrom(const FoodList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FoodList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerMessage.FoodList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerMessage_2eproto);
    return ::descriptor_table_ServerMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFoodFieldNumber = 1,
  };
  // repeated .ServerMessage.Food food = 1;
  int food_size() const;
  private:
  int _internal_food_size() const;
  public:
  void clear_food();
  ::ServerMessage::Food* mutable_food(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerMessage::Food >*
      mutable_food();
  private:
  const ::ServerMessage::Food& _internal_food(int index) const;
  ::ServerMessage::Food* _internal_add_food();
  public:
  const ::ServerMessage::Food& food(int index) const;
  ::ServerMessage::Food* add_food();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerMessage::Food >&
      food() const;

  // @@protoc_insertion_point(class_scope:ServerMessage.FoodList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerMessage::Food > food_;
  friend struct ::TableStruct_ServerMessage_2eproto;
};
// -------------------------------------------------------------------

class PlayerList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerMessage.PlayerList) */ {
 public:
  PlayerList();
  virtual ~PlayerList();

  PlayerList(const PlayerList& from);
  PlayerList(PlayerList&& from) noexcept
    : PlayerList() {
    *this = ::std::move(from);
  }

  inline PlayerList& operator=(const PlayerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerList& operator=(PlayerList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerList* internal_default_instance() {
    return reinterpret_cast<const PlayerList*>(
               &_PlayerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerList& a, PlayerList& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerList* New() const final {
    return CreateMaybeMessage<PlayerList>(nullptr);
  }

  PlayerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerList& from);
  void MergeFrom(const PlayerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerMessage.PlayerList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerMessage_2eproto);
    return ::descriptor_table_ServerMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // repeated .ServerMessage.Player player = 1;
  int player_size() const;
  private:
  int _internal_player_size() const;
  public:
  void clear_player();
  ::ServerMessage::Player* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerMessage::Player >*
      mutable_player();
  private:
  const ::ServerMessage::Player& _internal_player(int index) const;
  ::ServerMessage::Player* _internal_add_player();
  public:
  const ::ServerMessage::Player& player(int index) const;
  ::ServerMessage::Player* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerMessage::Player >&
      player() const;

  // @@protoc_insertion_point(class_scope:ServerMessage.PlayerList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerMessage::Player > player_;
  friend struct ::TableStruct_ServerMessage_2eproto;
};
// -------------------------------------------------------------------

class Food :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerMessage.Food) */ {
 public:
  Food();
  virtual ~Food();

  Food(const Food& from);
  Food(Food&& from) noexcept
    : Food() {
    *this = ::std::move(from);
  }

  inline Food& operator=(const Food& from) {
    CopyFrom(from);
    return *this;
  }
  inline Food& operator=(Food&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Food& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Food* internal_default_instance() {
    return reinterpret_cast<const Food*>(
               &_Food_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Food& a, Food& b) {
    a.Swap(&b);
  }
  inline void Swap(Food* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Food* New() const final {
    return CreateMaybeMessage<Food>(nullptr);
  }

  Food* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Food>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Food& from);
  void MergeFrom(const Food& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Food* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerMessage.Food";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerMessage_2eproto);
    return ::descriptor_table_ServerMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kMassFieldNumber = 3,
    kEatenFieldNumber = 4,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float mass = 3;
  bool has_mass() const;
  private:
  bool _internal_has_mass() const;
  public:
  void clear_mass();
  float mass() const;
  void set_mass(float value);
  private:
  float _internal_mass() const;
  void _internal_set_mass(float value);
  public:

  // required bool eaten = 4;
  bool has_eaten() const;
  private:
  bool _internal_has_eaten() const;
  public:
  void clear_eaten();
  bool eaten() const;
  void set_eaten(bool value);
  private:
  bool _internal_eaten() const;
  void _internal_set_eaten(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ServerMessage.Food)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float mass_;
  bool eaten_;
  friend struct ::TableStruct_ServerMessage_2eproto;
};
// -------------------------------------------------------------------

class Player :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerMessage.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerMessage.Player";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerMessage_2eproto);
    return ::descriptor_table_ServerMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kMassFieldNumber = 3,
    kIdFieldNumber = 5,
  };
  // required string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float mass = 3;
  bool has_mass() const;
  private:
  bool _internal_has_mass() const;
  public:
  void clear_mass();
  float mass() const;
  void set_mass(float value);
  private:
  float _internal_mass() const;
  void _internal_set_mass(float value);
  public:

  // required int32 id = 5;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerMessage.Player)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float x_;
  float y_;
  float mass_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_ServerMessage_2eproto;
};
// -------------------------------------------------------------------

class CurrentPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerMessage.CurrentPlayer) */ {
 public:
  CurrentPlayer();
  virtual ~CurrentPlayer();

  CurrentPlayer(const CurrentPlayer& from);
  CurrentPlayer(CurrentPlayer&& from) noexcept
    : CurrentPlayer() {
    *this = ::std::move(from);
  }

  inline CurrentPlayer& operator=(const CurrentPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentPlayer& operator=(CurrentPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurrentPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrentPlayer* internal_default_instance() {
    return reinterpret_cast<const CurrentPlayer*>(
               &_CurrentPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CurrentPlayer& a, CurrentPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurrentPlayer* New() const final {
    return CreateMaybeMessage<CurrentPlayer>(nullptr);
  }

  CurrentPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrentPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurrentPlayer& from);
  void MergeFrom(const CurrentPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerMessage.CurrentPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerMessage_2eproto);
    return ::descriptor_table_ServerMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kMassFieldNumber = 3,
  };
  // required string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float mass = 3;
  bool has_mass() const;
  private:
  bool _internal_has_mass() const;
  public:
  void clear_mass();
  float mass() const;
  void set_mass(float value);
  private:
  float _internal_mass() const;
  void _internal_set_mass(float value);
  public:

  // @@protoc_insertion_point(class_scope:ServerMessage.CurrentPlayer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float x_;
  float y_;
  float mass_;
  friend struct ::TableStruct_ServerMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerMessage

// optional .ServerMessage.FoodList foodList = 1;
inline bool ServerMessage::_internal_has_foodlist() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || foodlist_ != nullptr);
  return value;
}
inline bool ServerMessage::has_foodlist() const {
  return _internal_has_foodlist();
}
inline void ServerMessage::clear_foodlist() {
  if (foodlist_ != nullptr) foodlist_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ServerMessage::FoodList& ServerMessage::_internal_foodlist() const {
  const ::ServerMessage::FoodList* p = foodlist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ServerMessage::FoodList*>(
      &::ServerMessage::_FoodList_default_instance_);
}
inline const ::ServerMessage::FoodList& ServerMessage::foodlist() const {
  // @@protoc_insertion_point(field_get:ServerMessage.ServerMessage.foodList)
  return _internal_foodlist();
}
inline ::ServerMessage::FoodList* ServerMessage::release_foodlist() {
  // @@protoc_insertion_point(field_release:ServerMessage.ServerMessage.foodList)
  _has_bits_[0] &= ~0x00000001u;
  ::ServerMessage::FoodList* temp = foodlist_;
  foodlist_ = nullptr;
  return temp;
}
inline ::ServerMessage::FoodList* ServerMessage::_internal_mutable_foodlist() {
  _has_bits_[0] |= 0x00000001u;
  if (foodlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::ServerMessage::FoodList>(GetArenaNoVirtual());
    foodlist_ = p;
  }
  return foodlist_;
}
inline ::ServerMessage::FoodList* ServerMessage::mutable_foodlist() {
  // @@protoc_insertion_point(field_mutable:ServerMessage.ServerMessage.foodList)
  return _internal_mutable_foodlist();
}
inline void ServerMessage::set_allocated_foodlist(::ServerMessage::FoodList* foodlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete foodlist_;
  }
  if (foodlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foodlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foodlist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  foodlist_ = foodlist;
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.ServerMessage.foodList)
}

// optional .ServerMessage.PlayerList playerList = 2;
inline bool ServerMessage::_internal_has_playerlist() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || playerlist_ != nullptr);
  return value;
}
inline bool ServerMessage::has_playerlist() const {
  return _internal_has_playerlist();
}
inline void ServerMessage::clear_playerlist() {
  if (playerlist_ != nullptr) playerlist_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ServerMessage::PlayerList& ServerMessage::_internal_playerlist() const {
  const ::ServerMessage::PlayerList* p = playerlist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ServerMessage::PlayerList*>(
      &::ServerMessage::_PlayerList_default_instance_);
}
inline const ::ServerMessage::PlayerList& ServerMessage::playerlist() const {
  // @@protoc_insertion_point(field_get:ServerMessage.ServerMessage.playerList)
  return _internal_playerlist();
}
inline ::ServerMessage::PlayerList* ServerMessage::release_playerlist() {
  // @@protoc_insertion_point(field_release:ServerMessage.ServerMessage.playerList)
  _has_bits_[0] &= ~0x00000002u;
  ::ServerMessage::PlayerList* temp = playerlist_;
  playerlist_ = nullptr;
  return temp;
}
inline ::ServerMessage::PlayerList* ServerMessage::_internal_mutable_playerlist() {
  _has_bits_[0] |= 0x00000002u;
  if (playerlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::ServerMessage::PlayerList>(GetArenaNoVirtual());
    playerlist_ = p;
  }
  return playerlist_;
}
inline ::ServerMessage::PlayerList* ServerMessage::mutable_playerlist() {
  // @@protoc_insertion_point(field_mutable:ServerMessage.ServerMessage.playerList)
  return _internal_mutable_playerlist();
}
inline void ServerMessage::set_allocated_playerlist(::ServerMessage::PlayerList* playerlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete playerlist_;
  }
  if (playerlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      playerlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerlist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playerlist_ = playerlist;
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.ServerMessage.playerList)
}

// optional .ServerMessage.CurrentPlayer currentPlayer = 3;
inline bool ServerMessage::_internal_has_currentplayer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || currentplayer_ != nullptr);
  return value;
}
inline bool ServerMessage::has_currentplayer() const {
  return _internal_has_currentplayer();
}
inline void ServerMessage::clear_currentplayer() {
  if (currentplayer_ != nullptr) currentplayer_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ServerMessage::CurrentPlayer& ServerMessage::_internal_currentplayer() const {
  const ::ServerMessage::CurrentPlayer* p = currentplayer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ServerMessage::CurrentPlayer*>(
      &::ServerMessage::_CurrentPlayer_default_instance_);
}
inline const ::ServerMessage::CurrentPlayer& ServerMessage::currentplayer() const {
  // @@protoc_insertion_point(field_get:ServerMessage.ServerMessage.currentPlayer)
  return _internal_currentplayer();
}
inline ::ServerMessage::CurrentPlayer* ServerMessage::release_currentplayer() {
  // @@protoc_insertion_point(field_release:ServerMessage.ServerMessage.currentPlayer)
  _has_bits_[0] &= ~0x00000004u;
  ::ServerMessage::CurrentPlayer* temp = currentplayer_;
  currentplayer_ = nullptr;
  return temp;
}
inline ::ServerMessage::CurrentPlayer* ServerMessage::_internal_mutable_currentplayer() {
  _has_bits_[0] |= 0x00000004u;
  if (currentplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::ServerMessage::CurrentPlayer>(GetArenaNoVirtual());
    currentplayer_ = p;
  }
  return currentplayer_;
}
inline ::ServerMessage::CurrentPlayer* ServerMessage::mutable_currentplayer() {
  // @@protoc_insertion_point(field_mutable:ServerMessage.ServerMessage.currentPlayer)
  return _internal_mutable_currentplayer();
}
inline void ServerMessage::set_allocated_currentplayer(::ServerMessage::CurrentPlayer* currentplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete currentplayer_;
  }
  if (currentplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      currentplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentplayer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  currentplayer_ = currentplayer;
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.ServerMessage.currentPlayer)
}

// required .ServerMessage.ServerMessage.MessageType messageType = 4;
inline bool ServerMessage::_internal_has_messagetype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServerMessage::has_messagetype() const {
  return _internal_has_messagetype();
}
inline void ServerMessage::clear_messagetype() {
  messagetype_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ServerMessage::ServerMessage_MessageType ServerMessage::_internal_messagetype() const {
  return static_cast< ::ServerMessage::ServerMessage_MessageType >(messagetype_);
}
inline ::ServerMessage::ServerMessage_MessageType ServerMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:ServerMessage.ServerMessage.messageType)
  return _internal_messagetype();
}
inline void ServerMessage::_internal_set_messagetype(::ServerMessage::ServerMessage_MessageType value) {
  assert(::ServerMessage::ServerMessage_MessageType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  messagetype_ = value;
}
inline void ServerMessage::set_messagetype(::ServerMessage::ServerMessage_MessageType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:ServerMessage.ServerMessage.messageType)
}

// -------------------------------------------------------------------

// FoodList

// repeated .ServerMessage.Food food = 1;
inline int FoodList::_internal_food_size() const {
  return food_.size();
}
inline int FoodList::food_size() const {
  return _internal_food_size();
}
inline void FoodList::clear_food() {
  food_.Clear();
}
inline ::ServerMessage::Food* FoodList::mutable_food(int index) {
  // @@protoc_insertion_point(field_mutable:ServerMessage.FoodList.food)
  return food_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerMessage::Food >*
FoodList::mutable_food() {
  // @@protoc_insertion_point(field_mutable_list:ServerMessage.FoodList.food)
  return &food_;
}
inline const ::ServerMessage::Food& FoodList::_internal_food(int index) const {
  return food_.Get(index);
}
inline const ::ServerMessage::Food& FoodList::food(int index) const {
  // @@protoc_insertion_point(field_get:ServerMessage.FoodList.food)
  return _internal_food(index);
}
inline ::ServerMessage::Food* FoodList::_internal_add_food() {
  return food_.Add();
}
inline ::ServerMessage::Food* FoodList::add_food() {
  // @@protoc_insertion_point(field_add:ServerMessage.FoodList.food)
  return _internal_add_food();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerMessage::Food >&
FoodList::food() const {
  // @@protoc_insertion_point(field_list:ServerMessage.FoodList.food)
  return food_;
}

// -------------------------------------------------------------------

// PlayerList

// repeated .ServerMessage.Player player = 1;
inline int PlayerList::_internal_player_size() const {
  return player_.size();
}
inline int PlayerList::player_size() const {
  return _internal_player_size();
}
inline void PlayerList::clear_player() {
  player_.Clear();
}
inline ::ServerMessage::Player* PlayerList::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:ServerMessage.PlayerList.player)
  return player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerMessage::Player >*
PlayerList::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:ServerMessage.PlayerList.player)
  return &player_;
}
inline const ::ServerMessage::Player& PlayerList::_internal_player(int index) const {
  return player_.Get(index);
}
inline const ::ServerMessage::Player& PlayerList::player(int index) const {
  // @@protoc_insertion_point(field_get:ServerMessage.PlayerList.player)
  return _internal_player(index);
}
inline ::ServerMessage::Player* PlayerList::_internal_add_player() {
  return player_.Add();
}
inline ::ServerMessage::Player* PlayerList::add_player() {
  // @@protoc_insertion_point(field_add:ServerMessage.PlayerList.player)
  return _internal_add_player();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerMessage::Player >&
PlayerList::player() const {
  // @@protoc_insertion_point(field_list:ServerMessage.PlayerList.player)
  return player_;
}

// -------------------------------------------------------------------

// Food

// required float x = 1;
inline bool Food::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Food::has_x() const {
  return _internal_has_x();
}
inline void Food::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Food::_internal_x() const {
  return x_;
}
inline float Food::x() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Food.x)
  return _internal_x();
}
inline void Food::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Food::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ServerMessage.Food.x)
}

// required float y = 2;
inline bool Food::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Food::has_y() const {
  return _internal_has_y();
}
inline void Food::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Food::_internal_y() const {
  return y_;
}
inline float Food::y() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Food.y)
  return _internal_y();
}
inline void Food::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Food::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ServerMessage.Food.y)
}

// required float mass = 3;
inline bool Food::_internal_has_mass() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Food::has_mass() const {
  return _internal_has_mass();
}
inline void Food::clear_mass() {
  mass_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Food::_internal_mass() const {
  return mass_;
}
inline float Food::mass() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Food.mass)
  return _internal_mass();
}
inline void Food::_internal_set_mass(float value) {
  _has_bits_[0] |= 0x00000004u;
  mass_ = value;
}
inline void Food::set_mass(float value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:ServerMessage.Food.mass)
}

// required bool eaten = 4;
inline bool Food::_internal_has_eaten() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Food::has_eaten() const {
  return _internal_has_eaten();
}
inline void Food::clear_eaten() {
  eaten_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Food::_internal_eaten() const {
  return eaten_;
}
inline bool Food::eaten() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Food.eaten)
  return _internal_eaten();
}
inline void Food::_internal_set_eaten(bool value) {
  _has_bits_[0] |= 0x00000008u;
  eaten_ = value;
}
inline void Food::set_eaten(bool value) {
  _internal_set_eaten(value);
  // @@protoc_insertion_point(field_set:ServerMessage.Food.eaten)
}

// -------------------------------------------------------------------

// Player

// required float x = 1;
inline bool Player::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Player::has_x() const {
  return _internal_has_x();
}
inline void Player::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Player::_internal_x() const {
  return x_;
}
inline float Player::x() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Player.x)
  return _internal_x();
}
inline void Player::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void Player::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ServerMessage.Player.x)
}

// required float y = 2;
inline bool Player::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Player::has_y() const {
  return _internal_has_y();
}
inline void Player::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Player::_internal_y() const {
  return y_;
}
inline float Player::y() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Player.y)
  return _internal_y();
}
inline void Player::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void Player::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ServerMessage.Player.y)
}

// required float mass = 3;
inline bool Player::_internal_has_mass() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Player::has_mass() const {
  return _internal_has_mass();
}
inline void Player::clear_mass() {
  mass_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Player::_internal_mass() const {
  return mass_;
}
inline float Player::mass() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Player.mass)
  return _internal_mass();
}
inline void Player::_internal_set_mass(float value) {
  _has_bits_[0] |= 0x00000008u;
  mass_ = value;
}
inline void Player::set_mass(float value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:ServerMessage.Player.mass)
}

// required string name = 4;
inline bool Player::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Player::has_name() const {
  return _internal_has_name();
}
inline void Player::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Player.name)
  return _internal_name();
}
inline void Player::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ServerMessage.Player.name)
}
inline std::string* Player::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ServerMessage.Player.name)
  return _internal_mutable_name();
}
inline const std::string& Player::_internal_name() const {
  return name_.GetNoArena();
}
inline void Player::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Player::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerMessage.Player.name)
}
inline void Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerMessage.Player.name)
}
inline void Player::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerMessage.Player.name)
}
inline std::string* Player::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:ServerMessage.Player.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.Player.name)
}

// required int32 id = 5;
inline bool Player::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Player::has_id() const {
  return _internal_has_id();
}
inline void Player::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::id() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void Player::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ServerMessage.Player.id)
}

// -------------------------------------------------------------------

// CurrentPlayer

// required float x = 1;
inline bool CurrentPlayer::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CurrentPlayer::has_x() const {
  return _internal_has_x();
}
inline void CurrentPlayer::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CurrentPlayer::_internal_x() const {
  return x_;
}
inline float CurrentPlayer::x() const {
  // @@protoc_insertion_point(field_get:ServerMessage.CurrentPlayer.x)
  return _internal_x();
}
inline void CurrentPlayer::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void CurrentPlayer::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ServerMessage.CurrentPlayer.x)
}

// required float y = 2;
inline bool CurrentPlayer::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CurrentPlayer::has_y() const {
  return _internal_has_y();
}
inline void CurrentPlayer::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CurrentPlayer::_internal_y() const {
  return y_;
}
inline float CurrentPlayer::y() const {
  // @@protoc_insertion_point(field_get:ServerMessage.CurrentPlayer.y)
  return _internal_y();
}
inline void CurrentPlayer::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void CurrentPlayer::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ServerMessage.CurrentPlayer.y)
}

// required float mass = 3;
inline bool CurrentPlayer::_internal_has_mass() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CurrentPlayer::has_mass() const {
  return _internal_has_mass();
}
inline void CurrentPlayer::clear_mass() {
  mass_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CurrentPlayer::_internal_mass() const {
  return mass_;
}
inline float CurrentPlayer::mass() const {
  // @@protoc_insertion_point(field_get:ServerMessage.CurrentPlayer.mass)
  return _internal_mass();
}
inline void CurrentPlayer::_internal_set_mass(float value) {
  _has_bits_[0] |= 0x00000008u;
  mass_ = value;
}
inline void CurrentPlayer::set_mass(float value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:ServerMessage.CurrentPlayer.mass)
}

// required string name = 4;
inline bool CurrentPlayer::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CurrentPlayer::has_name() const {
  return _internal_has_name();
}
inline void CurrentPlayer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CurrentPlayer::name() const {
  // @@protoc_insertion_point(field_get:ServerMessage.CurrentPlayer.name)
  return _internal_name();
}
inline void CurrentPlayer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ServerMessage.CurrentPlayer.name)
}
inline std::string* CurrentPlayer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ServerMessage.CurrentPlayer.name)
  return _internal_mutable_name();
}
inline const std::string& CurrentPlayer::_internal_name() const {
  return name_.GetNoArena();
}
inline void CurrentPlayer::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CurrentPlayer::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerMessage.CurrentPlayer.name)
}
inline void CurrentPlayer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerMessage.CurrentPlayer.name)
}
inline void CurrentPlayer::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerMessage.CurrentPlayer.name)
}
inline std::string* CurrentPlayer::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CurrentPlayer::release_name() {
  // @@protoc_insertion_point(field_release:ServerMessage.CurrentPlayer.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CurrentPlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.CurrentPlayer.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ServerMessage::ServerMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerMessage::ServerMessage_MessageType>() {
  return ::ServerMessage::ServerMessage_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServerMessage_2eproto
