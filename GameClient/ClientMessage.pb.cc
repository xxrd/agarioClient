// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientMessage.proto

#include "ClientMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ClientMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientInformation_ClientMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MousePosition_ClientMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowCenterPosition_ClientMessage_2eproto;
namespace ClientMessage {
class ClientMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMessage> _instance;
} _ClientMessage_default_instance_;
class ClientInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientInformation> _instance;
} _ClientInformation_default_instance_;
class MousePositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MousePosition> _instance;
} _MousePosition_default_instance_;
class WindowCenterPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowCenterPosition> _instance;
} _WindowCenterPosition_default_instance_;
}  // namespace ClientMessage
static void InitDefaultsscc_info_ClientInformation_ClientMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ClientMessage::_ClientInformation_default_instance_;
    new (ptr) ::ClientMessage::ClientInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientMessage::ClientInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientInformation_ClientMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClientInformation_ClientMessage_2eproto}, {
      &scc_info_MousePosition_ClientMessage_2eproto.base,
      &scc_info_WindowCenterPosition_ClientMessage_2eproto.base,}};

static void InitDefaultsscc_info_ClientMessage_ClientMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ClientMessage::_ClientMessage_default_instance_;
    new (ptr) ::ClientMessage::ClientMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientMessage::ClientMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientMessage_ClientMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientMessage_ClientMessage_2eproto}, {
      &scc_info_ClientInformation_ClientMessage_2eproto.base,}};

static void InitDefaultsscc_info_MousePosition_ClientMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ClientMessage::_MousePosition_default_instance_;
    new (ptr) ::ClientMessage::MousePosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientMessage::MousePosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MousePosition_ClientMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MousePosition_ClientMessage_2eproto}, {}};

static void InitDefaultsscc_info_WindowCenterPosition_ClientMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ClientMessage::_WindowCenterPosition_default_instance_;
    new (ptr) ::ClientMessage::WindowCenterPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientMessage::WindowCenterPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowCenterPosition_ClientMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WindowCenterPosition_ClientMessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ClientMessage_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ClientMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ClientMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ClientMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ClientMessage::ClientMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage::ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientMessage::ClientMessage, clientinformation_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage::ClientMessage, messagetype_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage::ClientMessage, playername_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ClientMessage::ClientInformation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage::ClientInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientMessage::ClientInformation, mouseposition_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage::ClientInformation, windowcenterposition_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ClientMessage::MousePosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage::MousePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientMessage::MousePosition, x_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage::MousePosition, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ClientMessage::WindowCenterPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage::WindowCenterPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientMessage::WindowCenterPosition, x_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage::WindowCenterPosition, y_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::ClientMessage::ClientMessage)},
  { 11, 18, sizeof(::ClientMessage::ClientInformation)},
  { 20, 27, sizeof(::ClientMessage::MousePosition)},
  { 29, 36, sizeof(::ClientMessage::WindowCenterPosition)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ClientMessage::_ClientMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ClientMessage::_ClientInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ClientMessage::_MousePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ClientMessage::_WindowCenterPosition_default_instance_),
};

const char descriptor_table_protodef_ClientMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023ClientMessage.proto\022\rClientMessage\"\340\001\n"
  "\rClientMessage\022;\n\021clientInformation\030\001 \002("
  "\0132 .ClientMessage.ClientInformation\022=\n\013m"
  "essageType\030\002 \002(\0162(.ClientMessage.ClientM"
  "essage.MessageType\022\022\n\nplayerName\030\003 \001(\t\"\?"
  "\n\013MessageType\022\020\n\014firstConnect\020\001\022\016\n\nplaye"
  "rInfo\020\002\022\016\n\ndisconnect\020\003\"\213\001\n\021ClientInform"
  "ation\0223\n\rmousePosition\030\001 \001(\0132\034.ClientMes"
  "sage.MousePosition\022A\n\024windowCenterPositi"
  "on\030\002 \001(\0132#.ClientMessage.WindowCenterPos"
  "ition\"%\n\rMousePosition\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002"
  " \002(\002\",\n\024WindowCenterPosition\022\t\n\001x\030\001 \002(\002\022"
  "\t\n\001y\030\002 \002(\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ClientMessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ClientMessage_2eproto_sccs[4] = {
  &scc_info_ClientInformation_ClientMessage_2eproto.base,
  &scc_info_ClientMessage_ClientMessage_2eproto.base,
  &scc_info_MousePosition_ClientMessage_2eproto.base,
  &scc_info_WindowCenterPosition_ClientMessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ClientMessage_2eproto_once;
static bool descriptor_table_ClientMessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ClientMessage_2eproto = {
  &descriptor_table_ClientMessage_2eproto_initialized, descriptor_table_protodef_ClientMessage_2eproto, "ClientMessage.proto", 490,
  &descriptor_table_ClientMessage_2eproto_once, descriptor_table_ClientMessage_2eproto_sccs, descriptor_table_ClientMessage_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_ClientMessage_2eproto::offsets,
  file_level_metadata_ClientMessage_2eproto, 4, file_level_enum_descriptors_ClientMessage_2eproto, file_level_service_descriptors_ClientMessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ClientMessage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ClientMessage_2eproto), true);
namespace ClientMessage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessage_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ClientMessage_2eproto);
  return file_level_enum_descriptors_ClientMessage_2eproto[0];
}
bool ClientMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientMessage_MessageType ClientMessage::firstConnect;
constexpr ClientMessage_MessageType ClientMessage::playerInfo;
constexpr ClientMessage_MessageType ClientMessage::disconnect;
constexpr ClientMessage_MessageType ClientMessage::MessageType_MIN;
constexpr ClientMessage_MessageType ClientMessage::MessageType_MAX;
constexpr int ClientMessage::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ClientMessage::InitAsDefaultInstance() {
  ::ClientMessage::_ClientMessage_default_instance_._instance.get_mutable()->clientinformation_ = const_cast< ::ClientMessage::ClientInformation*>(
      ::ClientMessage::ClientInformation::internal_default_instance());
}
class ClientMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientMessage>()._has_bits_);
  static const ::ClientMessage::ClientInformation& clientinformation(const ClientMessage* msg);
  static void set_has_clientinformation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_playername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ClientMessage::ClientInformation&
ClientMessage::_Internal::clientinformation(const ClientMessage* msg) {
  return *msg->clientinformation_;
}
ClientMessage::ClientMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.ClientMessage)
}
ClientMessage::ClientMessage(const ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playername()) {
    playername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  if (from._internal_has_clientinformation()) {
    clientinformation_ = new ::ClientMessage::ClientInformation(*from.clientinformation_);
  } else {
    clientinformation_ = nullptr;
  }
  messagetype_ = from.messagetype_;
  // @@protoc_insertion_point(copy_constructor:ClientMessage.ClientMessage)
}

void ClientMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientMessage_ClientMessage_2eproto.base);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clientinformation_ = nullptr;
  messagetype_ = 1;
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:ClientMessage.ClientMessage)
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clientinformation_;
}

void ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessage& ClientMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMessage_ClientMessage_2eproto.base);
  return *internal_default_instance();
}


void ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientMessage.ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      playername_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(clientinformation_ != nullptr);
      clientinformation_->Clear();
    }
    messagetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ClientMessage.ClientInformation clientInformation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clientinformation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ClientMessage.ClientMessage.MessageType messageType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ClientMessage::ClientMessage_MessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::ClientMessage::ClientMessage_MessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string playerName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientMessage.ClientMessage.playerName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ClientMessage.ClientInformation clientInformation = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::clientinformation(this), target, stream);
  }

  // required .ClientMessage.ClientMessage.MessageType messageType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_messagetype(), target);
  }

  // optional string playerName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ClientMessage.ClientMessage.playerName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_playername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.ClientMessage)
  return target;
}

size_t ClientMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ClientMessage.ClientMessage)
  size_t total_size = 0;

  if (_internal_has_clientinformation()) {
    // required .ClientMessage.ClientInformation clientInformation = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clientinformation_);
  }

  if (_internal_has_messagetype()) {
    // required .ClientMessage.ClientMessage.MessageType messageType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  return total_size;
}
size_t ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientMessage.ClientMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .ClientMessage.ClientInformation clientInformation = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clientinformation_);

    // required .ClientMessage.ClientMessage.MessageType messageType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string playerName = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientMessage.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientMessage.ClientMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientMessage.ClientMessage)
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientMessage.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      playername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playername_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_clientinformation()->::ClientMessage::ClientInformation::MergeFrom(from._internal_clientinformation());
    }
    if (cached_has_bits & 0x00000004u) {
      messagetype_ = from.messagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientMessage.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientMessage.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (_internal_has_clientinformation()) {
    if (!clientinformation_->IsInitialized()) return false;
  }
  return true;
}

void ClientMessage::InternalSwap(ClientMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playername_.Swap(&other->playername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clientinformation_, other->clientinformation_);
  swap(messagetype_, other->messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientInformation::InitAsDefaultInstance() {
  ::ClientMessage::_ClientInformation_default_instance_._instance.get_mutable()->mouseposition_ = const_cast< ::ClientMessage::MousePosition*>(
      ::ClientMessage::MousePosition::internal_default_instance());
  ::ClientMessage::_ClientInformation_default_instance_._instance.get_mutable()->windowcenterposition_ = const_cast< ::ClientMessage::WindowCenterPosition*>(
      ::ClientMessage::WindowCenterPosition::internal_default_instance());
}
class ClientInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientInformation>()._has_bits_);
  static const ::ClientMessage::MousePosition& mouseposition(const ClientInformation* msg);
  static void set_has_mouseposition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ClientMessage::WindowCenterPosition& windowcenterposition(const ClientInformation* msg);
  static void set_has_windowcenterposition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ClientMessage::MousePosition&
ClientInformation::_Internal::mouseposition(const ClientInformation* msg) {
  return *msg->mouseposition_;
}
const ::ClientMessage::WindowCenterPosition&
ClientInformation::_Internal::windowcenterposition(const ClientInformation* msg) {
  return *msg->windowcenterposition_;
}
ClientInformation::ClientInformation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.ClientInformation)
}
ClientInformation::ClientInformation(const ClientInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_mouseposition()) {
    mouseposition_ = new ::ClientMessage::MousePosition(*from.mouseposition_);
  } else {
    mouseposition_ = nullptr;
  }
  if (from._internal_has_windowcenterposition()) {
    windowcenterposition_ = new ::ClientMessage::WindowCenterPosition(*from.windowcenterposition_);
  } else {
    windowcenterposition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ClientMessage.ClientInformation)
}

void ClientInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientInformation_ClientMessage_2eproto.base);
  ::memset(&mouseposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&windowcenterposition_) -
      reinterpret_cast<char*>(&mouseposition_)) + sizeof(windowcenterposition_));
}

ClientInformation::~ClientInformation() {
  // @@protoc_insertion_point(destructor:ClientMessage.ClientInformation)
  SharedDtor();
}

void ClientInformation::SharedDtor() {
  if (this != internal_default_instance()) delete mouseposition_;
  if (this != internal_default_instance()) delete windowcenterposition_;
}

void ClientInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientInformation& ClientInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientInformation_ClientMessage_2eproto.base);
  return *internal_default_instance();
}


void ClientInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientMessage.ClientInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mouseposition_ != nullptr);
      mouseposition_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(windowcenterposition_ != nullptr);
      windowcenterposition_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClientInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ClientMessage.MousePosition mousePosition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mouseposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ClientMessage.WindowCenterPosition windowCenterPosition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_windowcenterposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientInformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.ClientInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ClientMessage.MousePosition mousePosition = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mouseposition(this), target, stream);
  }

  // optional .ClientMessage.WindowCenterPosition windowCenterPosition = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::windowcenterposition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.ClientInformation)
  return target;
}

size_t ClientInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientMessage.ClientInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ClientMessage.MousePosition mousePosition = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mouseposition_);
    }

    // optional .ClientMessage.WindowCenterPosition windowCenterPosition = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *windowcenterposition_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientMessage.ClientInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientMessage.ClientInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientMessage.ClientInformation)
    MergeFrom(*source);
  }
}

void ClientInformation::MergeFrom(const ClientInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientMessage.ClientInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mouseposition()->::ClientMessage::MousePosition::MergeFrom(from._internal_mouseposition());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_windowcenterposition()->::ClientMessage::WindowCenterPosition::MergeFrom(from._internal_windowcenterposition());
    }
  }
}

void ClientInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientMessage.ClientInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInformation::CopyFrom(const ClientInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientMessage.ClientInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInformation::IsInitialized() const {
  if (_internal_has_mouseposition()) {
    if (!mouseposition_->IsInitialized()) return false;
  }
  if (_internal_has_windowcenterposition()) {
    if (!windowcenterposition_->IsInitialized()) return false;
  }
  return true;
}

void ClientInformation::InternalSwap(ClientInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mouseposition_, other->mouseposition_);
  swap(windowcenterposition_, other->windowcenterposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MousePosition::InitAsDefaultInstance() {
}
class MousePosition::_Internal {
 public:
  using HasBits = decltype(std::declval<MousePosition>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MousePosition::MousePosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.MousePosition)
}
MousePosition::MousePosition(const MousePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ClientMessage.MousePosition)
}

void MousePosition::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

MousePosition::~MousePosition() {
  // @@protoc_insertion_point(destructor:ClientMessage.MousePosition)
  SharedDtor();
}

void MousePosition::SharedDtor() {
}

void MousePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MousePosition& MousePosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MousePosition_ClientMessage_2eproto.base);
  return *internal_default_instance();
}


void MousePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientMessage.MousePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MousePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MousePosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.MousePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.MousePosition)
  return target;
}

size_t MousePosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ClientMessage.MousePosition)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MousePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientMessage.MousePosition)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MousePosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientMessage.MousePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const MousePosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MousePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientMessage.MousePosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientMessage.MousePosition)
    MergeFrom(*source);
  }
}

void MousePosition::MergeFrom(const MousePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientMessage.MousePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MousePosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientMessage.MousePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MousePosition::CopyFrom(const MousePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientMessage.MousePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MousePosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MousePosition::InternalSwap(MousePosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MousePosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WindowCenterPosition::InitAsDefaultInstance() {
}
class WindowCenterPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<WindowCenterPosition>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WindowCenterPosition::WindowCenterPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.WindowCenterPosition)
}
WindowCenterPosition::WindowCenterPosition(const WindowCenterPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ClientMessage.WindowCenterPosition)
}

void WindowCenterPosition::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

WindowCenterPosition::~WindowCenterPosition() {
  // @@protoc_insertion_point(destructor:ClientMessage.WindowCenterPosition)
  SharedDtor();
}

void WindowCenterPosition::SharedDtor() {
}

void WindowCenterPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowCenterPosition& WindowCenterPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowCenterPosition_ClientMessage_2eproto.base);
  return *internal_default_instance();
}


void WindowCenterPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientMessage.WindowCenterPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WindowCenterPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WindowCenterPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.WindowCenterPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.WindowCenterPosition)
  return target;
}

size_t WindowCenterPosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ClientMessage.WindowCenterPosition)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t WindowCenterPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientMessage.WindowCenterPosition)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowCenterPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientMessage.WindowCenterPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowCenterPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WindowCenterPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientMessage.WindowCenterPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientMessage.WindowCenterPosition)
    MergeFrom(*source);
  }
}

void WindowCenterPosition::MergeFrom(const WindowCenterPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientMessage.WindowCenterPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WindowCenterPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientMessage.WindowCenterPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowCenterPosition::CopyFrom(const WindowCenterPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientMessage.WindowCenterPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowCenterPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void WindowCenterPosition::InternalSwap(WindowCenterPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowCenterPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ClientMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClientMessage::ClientMessage* Arena::CreateMaybeMessage< ::ClientMessage::ClientMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ClientMessage::ClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientMessage::ClientInformation* Arena::CreateMaybeMessage< ::ClientMessage::ClientInformation >(Arena* arena) {
  return Arena::CreateInternal< ::ClientMessage::ClientInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientMessage::MousePosition* Arena::CreateMaybeMessage< ::ClientMessage::MousePosition >(Arena* arena) {
  return Arena::CreateInternal< ::ClientMessage::MousePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientMessage::WindowCenterPosition* Arena::CreateMaybeMessage< ::ClientMessage::WindowCenterPosition >(Arena* arena) {
  return Arena::CreateInternal< ::ClientMessage::WindowCenterPosition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
