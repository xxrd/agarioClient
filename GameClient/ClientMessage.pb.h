// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ClientMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ClientMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ClientMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ClientMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ClientMessage_2eproto;
namespace ClientMessage {
class ClientInformation;
class ClientInformationDefaultTypeInternal;
extern ClientInformationDefaultTypeInternal _ClientInformation_default_instance_;
class ClientMessage;
class ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class MousePosition;
class MousePositionDefaultTypeInternal;
extern MousePositionDefaultTypeInternal _MousePosition_default_instance_;
class WindowCenterPosition;
class WindowCenterPositionDefaultTypeInternal;
extern WindowCenterPositionDefaultTypeInternal _WindowCenterPosition_default_instance_;
}  // namespace ClientMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientMessage::ClientInformation* Arena::CreateMaybeMessage<::ClientMessage::ClientInformation>(Arena*);
template<> ::ClientMessage::ClientMessage* Arena::CreateMaybeMessage<::ClientMessage::ClientMessage>(Arena*);
template<> ::ClientMessage::MousePosition* Arena::CreateMaybeMessage<::ClientMessage::MousePosition>(Arena*);
template<> ::ClientMessage::WindowCenterPosition* Arena::CreateMaybeMessage<::ClientMessage::WindowCenterPosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ClientMessage {

enum ClientMessage_MessageType : int {
  ClientMessage_MessageType_firstConnect = 1,
  ClientMessage_MessageType_playerInfo = 2,
  ClientMessage_MessageType_disconnect = 3
};
bool ClientMessage_MessageType_IsValid(int value);
constexpr ClientMessage_MessageType ClientMessage_MessageType_MessageType_MIN = ClientMessage_MessageType_firstConnect;
constexpr ClientMessage_MessageType ClientMessage_MessageType_MessageType_MAX = ClientMessage_MessageType_disconnect;
constexpr int ClientMessage_MessageType_MessageType_ARRAYSIZE = ClientMessage_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessage_MessageType_descriptor();
template<typename T>
inline const std::string& ClientMessage_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientMessage_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientMessage_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientMessage_MessageType_descriptor(), enum_t_value);
}
inline bool ClientMessage_MessageType_Parse(
    const std::string& name, ClientMessage_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientMessage_MessageType>(
    ClientMessage_MessageType_descriptor(), name, value);
}
// ===================================================================

class ClientMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientMessage.ClientMessage) */ {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(nullptr);
  }

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientMessage.ClientMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientMessage_2eproto);
    return ::descriptor_table_ClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientMessage_MessageType MessageType;
  static constexpr MessageType firstConnect =
    ClientMessage_MessageType_firstConnect;
  static constexpr MessageType playerInfo =
    ClientMessage_MessageType_playerInfo;
  static constexpr MessageType disconnect =
    ClientMessage_MessageType_disconnect;
  static inline bool MessageType_IsValid(int value) {
    return ClientMessage_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    ClientMessage_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    ClientMessage_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    ClientMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return ClientMessage_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return ClientMessage_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return ClientMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 3,
    kClientInformationFieldNumber = 1,
    kMessageTypeFieldNumber = 2,
  };
  // optional string playerName = 3;
  bool has_playername() const;
  private:
  bool _internal_has_playername() const;
  public:
  void clear_playername();
  const std::string& playername() const;
  void set_playername(const std::string& value);
  void set_playername(std::string&& value);
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  std::string* mutable_playername();
  std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // required .ClientMessage.ClientInformation clientInformation = 1;
  bool has_clientinformation() const;
  private:
  bool _internal_has_clientinformation() const;
  public:
  void clear_clientinformation();
  const ::ClientMessage::ClientInformation& clientinformation() const;
  ::ClientMessage::ClientInformation* release_clientinformation();
  ::ClientMessage::ClientInformation* mutable_clientinformation();
  void set_allocated_clientinformation(::ClientMessage::ClientInformation* clientinformation);
  private:
  const ::ClientMessage::ClientInformation& _internal_clientinformation() const;
  ::ClientMessage::ClientInformation* _internal_mutable_clientinformation();
  public:

  // required .ClientMessage.ClientMessage.MessageType messageType = 2;
  bool has_messagetype() const;
  private:
  bool _internal_has_messagetype() const;
  public:
  void clear_messagetype();
  ::ClientMessage::ClientMessage_MessageType messagetype() const;
  void set_messagetype(::ClientMessage::ClientMessage_MessageType value);
  private:
  ::ClientMessage::ClientMessage_MessageType _internal_messagetype() const;
  void _internal_set_messagetype(::ClientMessage::ClientMessage_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:ClientMessage.ClientMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  ::ClientMessage::ClientInformation* clientinformation_;
  int messagetype_;
  friend struct ::TableStruct_ClientMessage_2eproto;
};
// -------------------------------------------------------------------

class ClientInformation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientMessage.ClientInformation) */ {
 public:
  ClientInformation();
  virtual ~ClientInformation();

  ClientInformation(const ClientInformation& from);
  ClientInformation(ClientInformation&& from) noexcept
    : ClientInformation() {
    *this = ::std::move(from);
  }

  inline ClientInformation& operator=(const ClientInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInformation& operator=(ClientInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientInformation* internal_default_instance() {
    return reinterpret_cast<const ClientInformation*>(
               &_ClientInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientInformation& a, ClientInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientInformation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientInformation* New() const final {
    return CreateMaybeMessage<ClientInformation>(nullptr);
  }

  ClientInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientInformation& from);
  void MergeFrom(const ClientInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientMessage.ClientInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientMessage_2eproto);
    return ::descriptor_table_ClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMousePositionFieldNumber = 1,
    kWindowCenterPositionFieldNumber = 2,
  };
  // optional .ClientMessage.MousePosition mousePosition = 1;
  bool has_mouseposition() const;
  private:
  bool _internal_has_mouseposition() const;
  public:
  void clear_mouseposition();
  const ::ClientMessage::MousePosition& mouseposition() const;
  ::ClientMessage::MousePosition* release_mouseposition();
  ::ClientMessage::MousePosition* mutable_mouseposition();
  void set_allocated_mouseposition(::ClientMessage::MousePosition* mouseposition);
  private:
  const ::ClientMessage::MousePosition& _internal_mouseposition() const;
  ::ClientMessage::MousePosition* _internal_mutable_mouseposition();
  public:

  // optional .ClientMessage.WindowCenterPosition windowCenterPosition = 2;
  bool has_windowcenterposition() const;
  private:
  bool _internal_has_windowcenterposition() const;
  public:
  void clear_windowcenterposition();
  const ::ClientMessage::WindowCenterPosition& windowcenterposition() const;
  ::ClientMessage::WindowCenterPosition* release_windowcenterposition();
  ::ClientMessage::WindowCenterPosition* mutable_windowcenterposition();
  void set_allocated_windowcenterposition(::ClientMessage::WindowCenterPosition* windowcenterposition);
  private:
  const ::ClientMessage::WindowCenterPosition& _internal_windowcenterposition() const;
  ::ClientMessage::WindowCenterPosition* _internal_mutable_windowcenterposition();
  public:

  // @@protoc_insertion_point(class_scope:ClientMessage.ClientInformation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ClientMessage::MousePosition* mouseposition_;
  ::ClientMessage::WindowCenterPosition* windowcenterposition_;
  friend struct ::TableStruct_ClientMessage_2eproto;
};
// -------------------------------------------------------------------

class MousePosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientMessage.MousePosition) */ {
 public:
  MousePosition();
  virtual ~MousePosition();

  MousePosition(const MousePosition& from);
  MousePosition(MousePosition&& from) noexcept
    : MousePosition() {
    *this = ::std::move(from);
  }

  inline MousePosition& operator=(const MousePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline MousePosition& operator=(MousePosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MousePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MousePosition* internal_default_instance() {
    return reinterpret_cast<const MousePosition*>(
               &_MousePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MousePosition& a, MousePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(MousePosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MousePosition* New() const final {
    return CreateMaybeMessage<MousePosition>(nullptr);
  }

  MousePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MousePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MousePosition& from);
  void MergeFrom(const MousePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MousePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientMessage.MousePosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientMessage_2eproto);
    return ::descriptor_table_ClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:ClientMessage.MousePosition)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_ClientMessage_2eproto;
};
// -------------------------------------------------------------------

class WindowCenterPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientMessage.WindowCenterPosition) */ {
 public:
  WindowCenterPosition();
  virtual ~WindowCenterPosition();

  WindowCenterPosition(const WindowCenterPosition& from);
  WindowCenterPosition(WindowCenterPosition&& from) noexcept
    : WindowCenterPosition() {
    *this = ::std::move(from);
  }

  inline WindowCenterPosition& operator=(const WindowCenterPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowCenterPosition& operator=(WindowCenterPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowCenterPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowCenterPosition* internal_default_instance() {
    return reinterpret_cast<const WindowCenterPosition*>(
               &_WindowCenterPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WindowCenterPosition& a, WindowCenterPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowCenterPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowCenterPosition* New() const final {
    return CreateMaybeMessage<WindowCenterPosition>(nullptr);
  }

  WindowCenterPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowCenterPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowCenterPosition& from);
  void MergeFrom(const WindowCenterPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowCenterPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientMessage.WindowCenterPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ClientMessage_2eproto);
    return ::descriptor_table_ClientMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:ClientMessage.WindowCenterPosition)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_ClientMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientMessage

// required .ClientMessage.ClientInformation clientInformation = 1;
inline bool ClientMessage::_internal_has_clientinformation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || clientinformation_ != nullptr);
  return value;
}
inline bool ClientMessage::has_clientinformation() const {
  return _internal_has_clientinformation();
}
inline void ClientMessage::clear_clientinformation() {
  if (clientinformation_ != nullptr) clientinformation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ClientMessage::ClientInformation& ClientMessage::_internal_clientinformation() const {
  const ::ClientMessage::ClientInformation* p = clientinformation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientMessage::ClientInformation*>(
      &::ClientMessage::_ClientInformation_default_instance_);
}
inline const ::ClientMessage::ClientInformation& ClientMessage::clientinformation() const {
  // @@protoc_insertion_point(field_get:ClientMessage.ClientMessage.clientInformation)
  return _internal_clientinformation();
}
inline ::ClientMessage::ClientInformation* ClientMessage::release_clientinformation() {
  // @@protoc_insertion_point(field_release:ClientMessage.ClientMessage.clientInformation)
  _has_bits_[0] &= ~0x00000002u;
  ::ClientMessage::ClientInformation* temp = clientinformation_;
  clientinformation_ = nullptr;
  return temp;
}
inline ::ClientMessage::ClientInformation* ClientMessage::_internal_mutable_clientinformation() {
  _has_bits_[0] |= 0x00000002u;
  if (clientinformation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientMessage::ClientInformation>(GetArenaNoVirtual());
    clientinformation_ = p;
  }
  return clientinformation_;
}
inline ::ClientMessage::ClientInformation* ClientMessage::mutable_clientinformation() {
  // @@protoc_insertion_point(field_mutable:ClientMessage.ClientMessage.clientInformation)
  return _internal_mutable_clientinformation();
}
inline void ClientMessage::set_allocated_clientinformation(::ClientMessage::ClientInformation* clientinformation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clientinformation_;
  }
  if (clientinformation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clientinformation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clientinformation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clientinformation_ = clientinformation;
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.ClientMessage.clientInformation)
}

// required .ClientMessage.ClientMessage.MessageType messageType = 2;
inline bool ClientMessage::_internal_has_messagetype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientMessage::has_messagetype() const {
  return _internal_has_messagetype();
}
inline void ClientMessage::clear_messagetype() {
  messagetype_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ClientMessage::ClientMessage_MessageType ClientMessage::_internal_messagetype() const {
  return static_cast< ::ClientMessage::ClientMessage_MessageType >(messagetype_);
}
inline ::ClientMessage::ClientMessage_MessageType ClientMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:ClientMessage.ClientMessage.messageType)
  return _internal_messagetype();
}
inline void ClientMessage::_internal_set_messagetype(::ClientMessage::ClientMessage_MessageType value) {
  assert(::ClientMessage::ClientMessage_MessageType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  messagetype_ = value;
}
inline void ClientMessage::set_messagetype(::ClientMessage::ClientMessage_MessageType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:ClientMessage.ClientMessage.messageType)
}

// optional string playerName = 3;
inline bool ClientMessage::_internal_has_playername() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientMessage::has_playername() const {
  return _internal_has_playername();
}
inline void ClientMessage::clear_playername() {
  playername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientMessage::playername() const {
  // @@protoc_insertion_point(field_get:ClientMessage.ClientMessage.playerName)
  return _internal_playername();
}
inline void ClientMessage::set_playername(const std::string& value) {
  _internal_set_playername(value);
  // @@protoc_insertion_point(field_set:ClientMessage.ClientMessage.playerName)
}
inline std::string* ClientMessage::mutable_playername() {
  // @@protoc_insertion_point(field_mutable:ClientMessage.ClientMessage.playerName)
  return _internal_mutable_playername();
}
inline const std::string& ClientMessage::_internal_playername() const {
  return playername_.GetNoArena();
}
inline void ClientMessage::_internal_set_playername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClientMessage::set_playername(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientMessage.ClientMessage.playerName)
}
inline void ClientMessage::set_playername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientMessage.ClientMessage.playerName)
}
inline void ClientMessage::set_playername(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientMessage.ClientMessage.playerName)
}
inline std::string* ClientMessage::_internal_mutable_playername() {
  _has_bits_[0] |= 0x00000001u;
  return playername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientMessage::release_playername() {
  // @@protoc_insertion_point(field_release:ClientMessage.ClientMessage.playerName)
  if (!_internal_has_playername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playername_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMessage::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.ClientMessage.playerName)
}

// -------------------------------------------------------------------

// ClientInformation

// optional .ClientMessage.MousePosition mousePosition = 1;
inline bool ClientInformation::_internal_has_mouseposition() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mouseposition_ != nullptr);
  return value;
}
inline bool ClientInformation::has_mouseposition() const {
  return _internal_has_mouseposition();
}
inline void ClientInformation::clear_mouseposition() {
  if (mouseposition_ != nullptr) mouseposition_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ClientMessage::MousePosition& ClientInformation::_internal_mouseposition() const {
  const ::ClientMessage::MousePosition* p = mouseposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientMessage::MousePosition*>(
      &::ClientMessage::_MousePosition_default_instance_);
}
inline const ::ClientMessage::MousePosition& ClientInformation::mouseposition() const {
  // @@protoc_insertion_point(field_get:ClientMessage.ClientInformation.mousePosition)
  return _internal_mouseposition();
}
inline ::ClientMessage::MousePosition* ClientInformation::release_mouseposition() {
  // @@protoc_insertion_point(field_release:ClientMessage.ClientInformation.mousePosition)
  _has_bits_[0] &= ~0x00000001u;
  ::ClientMessage::MousePosition* temp = mouseposition_;
  mouseposition_ = nullptr;
  return temp;
}
inline ::ClientMessage::MousePosition* ClientInformation::_internal_mutable_mouseposition() {
  _has_bits_[0] |= 0x00000001u;
  if (mouseposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientMessage::MousePosition>(GetArenaNoVirtual());
    mouseposition_ = p;
  }
  return mouseposition_;
}
inline ::ClientMessage::MousePosition* ClientInformation::mutable_mouseposition() {
  // @@protoc_insertion_point(field_mutable:ClientMessage.ClientInformation.mousePosition)
  return _internal_mutable_mouseposition();
}
inline void ClientInformation::set_allocated_mouseposition(::ClientMessage::MousePosition* mouseposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mouseposition_;
  }
  if (mouseposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mouseposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mouseposition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mouseposition_ = mouseposition;
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.ClientInformation.mousePosition)
}

// optional .ClientMessage.WindowCenterPosition windowCenterPosition = 2;
inline bool ClientInformation::_internal_has_windowcenterposition() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || windowcenterposition_ != nullptr);
  return value;
}
inline bool ClientInformation::has_windowcenterposition() const {
  return _internal_has_windowcenterposition();
}
inline void ClientInformation::clear_windowcenterposition() {
  if (windowcenterposition_ != nullptr) windowcenterposition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ClientMessage::WindowCenterPosition& ClientInformation::_internal_windowcenterposition() const {
  const ::ClientMessage::WindowCenterPosition* p = windowcenterposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientMessage::WindowCenterPosition*>(
      &::ClientMessage::_WindowCenterPosition_default_instance_);
}
inline const ::ClientMessage::WindowCenterPosition& ClientInformation::windowcenterposition() const {
  // @@protoc_insertion_point(field_get:ClientMessage.ClientInformation.windowCenterPosition)
  return _internal_windowcenterposition();
}
inline ::ClientMessage::WindowCenterPosition* ClientInformation::release_windowcenterposition() {
  // @@protoc_insertion_point(field_release:ClientMessage.ClientInformation.windowCenterPosition)
  _has_bits_[0] &= ~0x00000002u;
  ::ClientMessage::WindowCenterPosition* temp = windowcenterposition_;
  windowcenterposition_ = nullptr;
  return temp;
}
inline ::ClientMessage::WindowCenterPosition* ClientInformation::_internal_mutable_windowcenterposition() {
  _has_bits_[0] |= 0x00000002u;
  if (windowcenterposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientMessage::WindowCenterPosition>(GetArenaNoVirtual());
    windowcenterposition_ = p;
  }
  return windowcenterposition_;
}
inline ::ClientMessage::WindowCenterPosition* ClientInformation::mutable_windowcenterposition() {
  // @@protoc_insertion_point(field_mutable:ClientMessage.ClientInformation.windowCenterPosition)
  return _internal_mutable_windowcenterposition();
}
inline void ClientInformation::set_allocated_windowcenterposition(::ClientMessage::WindowCenterPosition* windowcenterposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete windowcenterposition_;
  }
  if (windowcenterposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      windowcenterposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, windowcenterposition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  windowcenterposition_ = windowcenterposition;
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.ClientInformation.windowCenterPosition)
}

// -------------------------------------------------------------------

// MousePosition

// required float x = 1;
inline bool MousePosition::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MousePosition::has_x() const {
  return _internal_has_x();
}
inline void MousePosition::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float MousePosition::_internal_x() const {
  return x_;
}
inline float MousePosition::x() const {
  // @@protoc_insertion_point(field_get:ClientMessage.MousePosition.x)
  return _internal_x();
}
inline void MousePosition::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void MousePosition::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ClientMessage.MousePosition.x)
}

// required float y = 2;
inline bool MousePosition::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MousePosition::has_y() const {
  return _internal_has_y();
}
inline void MousePosition::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MousePosition::_internal_y() const {
  return y_;
}
inline float MousePosition::y() const {
  // @@protoc_insertion_point(field_get:ClientMessage.MousePosition.y)
  return _internal_y();
}
inline void MousePosition::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void MousePosition::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ClientMessage.MousePosition.y)
}

// -------------------------------------------------------------------

// WindowCenterPosition

// required float x = 1;
inline bool WindowCenterPosition::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WindowCenterPosition::has_x() const {
  return _internal_has_x();
}
inline void WindowCenterPosition::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float WindowCenterPosition::_internal_x() const {
  return x_;
}
inline float WindowCenterPosition::x() const {
  // @@protoc_insertion_point(field_get:ClientMessage.WindowCenterPosition.x)
  return _internal_x();
}
inline void WindowCenterPosition::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void WindowCenterPosition::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ClientMessage.WindowCenterPosition.x)
}

// required float y = 2;
inline bool WindowCenterPosition::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WindowCenterPosition::has_y() const {
  return _internal_has_y();
}
inline void WindowCenterPosition::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float WindowCenterPosition::_internal_y() const {
  return y_;
}
inline float WindowCenterPosition::y() const {
  // @@protoc_insertion_point(field_get:ClientMessage.WindowCenterPosition.y)
  return _internal_y();
}
inline void WindowCenterPosition::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void WindowCenterPosition::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ClientMessage.WindowCenterPosition.y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClientMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientMessage::ClientMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientMessage::ClientMessage_MessageType>() {
  return ::ClientMessage::ClientMessage_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ClientMessage_2eproto
